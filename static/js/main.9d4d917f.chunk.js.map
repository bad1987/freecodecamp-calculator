{"version":3,"sources":["Button.js","index.js"],"names":["Button","text","handleClick","style","args","onClick","className","Calculator","props","compute","operandStack","operatorStack","precompute","length","op1","shift","isFloat","parseFloat","parseInt","op2","unshift","String","pop","push","addToCollect","data","temp","state","collect","output","input","join","console","log","isOperator","lastchar","setState","e","undefined","find","elt","startWithZeros","reset","formatOutput","reduce","result","str","filter","test","cpt","forEach","digits","f","width","height","id","operators","this","map","index","key","React","Component","ReactDOM","render","document","querySelector"],"mappings":"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","file":"static/js/main.9d4d917f.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction Button({ text, handleClick, style, ...args}) {\r\n    return (\r\n        <div\r\n            onClick={() =>handleClick(text)}\r\n            className=\"button\"\r\n            style={{...style}}\r\n            {...args}\r\n        >\r\n            {text}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Button\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport \"./index.scss\"\r\nimport \"bootstrap/dist/css/bootstrap.min.css\"\r\nimport Button from './Button'\r\n\r\nclass Calculator extends React.Component {\r\n    constructor(props){\r\n        super(props)\r\n        this.state = {\r\n            input: \"0\",\r\n            output: \"\",\r\n            lastchar: \"\",\r\n            operandStack: [],\r\n            operatorStack: [],\r\n            collect: []\r\n        }\r\n        this.digits = [\r\n            {text:\"7\", f: this.handleClick,style:{width: \"60px\",height: \"60px\"}, id: \"seven\"},\r\n            {text:\"8\", f: this.handleClick,style:{width: \"60px\",height: \"60px\"}, id: \"eight\"},\r\n            {text:\"9\", f: this.handleClick,style:{width: \"60px\",height: \"60px\"}, id: \"nine\"},\r\n            {text:\"4\", f: this.handleClick,style:{width: \"60px\",height: \"60px\"}, id: \"four\"},\r\n            {text:\"5\", f: this.handleClick,style:{width: \"60px\",height: \"60px\"}, id: \"five\"},\r\n            {text:\"6\", f: this.handleClick,style:{width: \"60px\",height: \"60px\"}, id: \"six\"},\r\n            {text:\"1\", f: this.handleClick,style:{width: \"60px\",height: \"60px\"}, id: \"one\"},\r\n            {text:\"2\", f: this.handleClick,style:{width: \"60px\",height: \"60px\"}, id: \"two\"},\r\n            {text:\"3\", f: this.handleClick,style:{width: \"60px\",height: \"60px\"}, id: \"three\"},\r\n            {text:\"0\", f: this.handleClick,style:{width: \"121px\",height: \"60px\"}, id: \"zero\"},\r\n            {text:\".\", f: this.handleClick,style:{width: \"60px\",height: \"60px\"}, id: \"decimal\"},\r\n        ]\r\n        this.operators = [\r\n            {text:\"AC\", f: this.handleClick,style:{width: \"121px\",height: \"60px\"}, id: \"clear\"},\r\n            {text:\"/\", f: this.handleClick,style:{width: \"60px\",height: \"60px\"}, id: \"divide\"},\r\n            {text:\"x\", f: this.handleClick,style:{width: \"60px\",height: \"60px\"}, id: \"multiply\"},\r\n            {text:\"-\", f: this.handleClick,style:{width: \"60px\",height: \"60px\"}, id: \"subtract\"},\r\n            {text:\"+\", f: this.handleClick,style:{width: \"60px\",height: \"60px\"}, id: \"add\"},\r\n            {text:\"=\", f: this.handleClick,style:{width: \"121px\",height: \"60px\"},id: \"equals\"},\r\n        ]\r\n    }\r\n\r\n    compute = (operandStack, operatorStack) => {\r\n        this.precompute(operandStack, operatorStack)\r\n        while( operatorStack.length){\r\n            let op1 = operandStack.shift()\r\n            op1 = this.isFloat(op1) ? parseFloat(op1) : parseInt(op1)\r\n            let op2 = operandStack.shift()\r\n            op2 = this.isFloat(op2) ? parseFloat(op2) : parseInt(op2)\r\n            const operator = operatorStack.shift()\r\n            switch(operator){\r\n                case \"+\":\r\n                    operandStack.unshift(String(op1 + op2))\r\n                    break\r\n                default:\r\n                    operandStack.unshift(String(op1 - op2))\r\n            }\r\n        }\r\n    }\r\n\r\n    precompute = (operandStack, operatorStack) => {\r\n        if(operatorStack.length && operatorStack[operatorStack.length - 1] === \"x\"){\r\n            let op1 = operandStack.pop()\r\n            op1 = this.isFloat(op1) ? parseFloat(op1) : parseInt(op1)\r\n            let op2 = operandStack.pop()\r\n            op2 = this.isFloat(op2) ? parseFloat(op2) : parseInt(op2)\r\n            operandStack.push(String(op1 * op2))\r\n            operatorStack.pop()\r\n        }\r\n        else if(operatorStack.length && operatorStack[operatorStack.length - 1] === \"/\"){\r\n            let op1 = operandStack.pop()\r\n            op1 = this.isFloat(op1) ? parseFloat(op1) : parseInt(op1)\r\n            let op2 = operandStack.pop()\r\n            op2 = this.isFloat(op2) ? parseFloat(op2) : parseInt(op2)\r\n            operandStack.push(String(op2 / op1))\r\n            operatorStack.pop()\r\n        }\r\n    }\r\n\r\n    addToCollect = data => {\r\n        let temp = [...this.state.collect]\r\n        const operandStack = [...this.state.operandStack]\r\n        const operatorStack = [...this.state.operatorStack]\r\n        let output = this.state.output + data\r\n        let input = this.state.input\r\n        if(data === \"=\"){\r\n            operandStack.push(temp.join(\"\"))\r\n            this.compute(operandStack,operatorStack)\r\n            output += operandStack[operandStack.length - 1]\r\n            input = operandStack[operandStack.length - 1]\r\n            temp = []\r\n            console.log(operatorStack)\r\n            console.log(operandStack)\r\n        }\r\n        else if(this.isOperator(data)){\r\n            if(this.isOperator(this.state.lastchar)){\r\n                if(data !== \"-\"){\r\n                    if(this.state.lastchar === \"-\"){\r\n                        temp = []\r\n                    }\r\n                    operatorStack.pop()\r\n                    operatorStack.push(data)\r\n                }\r\n                else{\r\n                    temp = [data]\r\n                }\r\n            }\r\n            else{\r\n                if(temp.length){\r\n                    operandStack.push(temp.join(\"\"))\r\n                }\r\n                this.precompute(operandStack, operatorStack)\r\n                operatorStack.push(data)\r\n                temp = []\r\n                console.log(operatorStack)\r\n                console.log(operandStack)\r\n            }\r\n        }\r\n        else{\r\n            temp.push(data)\r\n        }\r\n\r\n        if(temp[0]===\".\"){\r\n            temp.unshift(\"0\")\r\n        }\r\n        if(data !== \"=\" && !this.isOperator(this.state.lastchar)){\r\n            input = temp.length ?temp.join(\"\") : this.state.input\r\n        }\r\n        this.setState({\r\n            ...this.state,\r\n            collect: temp,\r\n            operandStack,\r\n            operatorStack,\r\n            input,\r\n            output,\r\n            lastchar: data\r\n        })\r\n    }\r\n\r\n    handleClick = e => {\r\n        if(e!== \"AC\"){\r\n            if(e===\".\"){\r\n                if(this.state.collect.find(elt => elt===\".\") === undefined){\r\n                    this.addToCollect(e)\r\n                }\r\n            }\r\n            else{\r\n                if((e===\"0\" && !this.startWithZeros()) || e !== \"0\")\r\n                    this.addToCollect(e)\r\n            }\r\n            \r\n        }\r\n        else{\r\n            this.reset()\r\n        }\r\n    }\r\n\r\n    formatOutput = () => {\r\n        const out = this.state.collect.reduce((result,elt)=>{\r\n            return result + elt\r\n        },\"\")\r\n        return out\r\n    }\r\n\r\n    isOperator = str => {\r\n        return [\"/\",\"x\",\"-\",\"+\"].filter(elt=>elt===str).length ? true: false\r\n    }\r\n\r\n    isFloat = data => {\r\n        const regex = /[.]/\r\n        return regex.test(data)\r\n    }\r\n\r\n    reset = () => {\r\n        this.setState({\r\n            ...this.state,\r\n            input: \"0\",\r\n            output: \"\",\r\n            lastchar: \"\",\r\n            operandStack: [],\r\n            operatorStack: [],\r\n            collect: []\r\n        })\r\n    }\r\n\r\n    startWithZeros = () => {\r\n        let cpt = 0;\r\n        this.state.collect.forEach(elt => {\r\n            cpt += elt===\"0\" ? 1 : 0\r\n        })\r\n        if(this.state.collect.length >= 1 && cpt === this.state.collect.length)\r\n            return true\r\n        return false\r\n    }\r\n    \r\n    render(){\r\n        return (\r\n            <div className=\"container fluid mt-4\">\r\n                <h1 className=\"text-muted text-center\">Calculator</h1>\r\n                <div className=\"content bg-secondary\">\r\n                    <div className=\"top-content\">\r\n                        <div id=\"output\" className=\"text-right pr-1 text-secondary\">{this.state.output} </div>\r\n                        <div id=\"display\" className=\"text-right pr-1\">{this.state.input}</div>\r\n                    </div>\r\n                    <div className=\"bottom-content\">\r\n                        <div className=\"numbers\">\r\n                            {this.digits.map((elt,index) => (\r\n                                <Button text={elt.text} handleClick={elt.f} key={index} style={elt.style} id={elt.id} />\r\n                            ))}\r\n                        </div>\r\n                        <div className=\"operators\">\r\n                            {\r\n                                this.operators.map((elt,index) =>(\r\n                                    <Button text={elt.text} handleClick={elt.f} key={index} style={elt.style} id={elt.id} />\r\n                                ))\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nReactDOM.render(\r\n    <Calculator />,\r\n    document.querySelector(\"#root\")\r\n)\r\n"],"sourceRoot":""}